
bldcWithPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd8  08004dd8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de0  08004de0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08004e44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08004e44  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5ce  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215c  00000000  00000000  0002e69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab6  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233e1  00000000  00000000  0003205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ff3  00000000  00000000  0005543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd350  00000000  00000000  00066432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ecc  00000000  00000000  00143784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00147650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d60 	.word	0x08004d60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004d60 	.word	0x08004d60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <map>:
#define  CALIB 1

uint8_t msg[100];

long map(long x, long inp_min, long inp_max, long out_min, long out_max)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	603b      	str	r3, [r7, #0]
	return (x-inp_min)*(out_max-out_min+1)/(inp_max-inp_min+1)+out_min;
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	69b9      	ldr	r1, [r7, #24]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	1a8a      	subs	r2, r1, r2
 80005d6:	3201      	adds	r2, #1
 80005d8:	fb03 f202 	mul.w	r2, r3, r2
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1acb      	subs	r3, r1, r3
 80005e2:	3301      	adds	r3, #1
 80005e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4413      	add	r3, r2
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
	//converted = map(adc_buff, 0, 4096, 35, 115);
	converted = map(adc_buff, 0, 4096, 35, 75);
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_ADC_ConvCpltCallback+0x58>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	234b      	movs	r3, #75	; 0x4b
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2323      	movs	r3, #35	; 0x23
 800060c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000610:	2100      	movs	r1, #0
 8000612:	f7ff ffd3 	bl	80005bc <map>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_ADC_ConvCpltCallback+0x5c>)
 800061a:	6013      	str	r3, [r2, #0]

	htim2.Instance->CCR1 = converted;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_ADC_ConvCpltCallback+0x5c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_ADC_ConvCpltCallback+0x60>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	635a      	str	r2, [r3, #52]	; 0x34

	sprintf((char*)msg, "Data: %d\r\n", converted);
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	490b      	ldr	r1, [pc, #44]	; (800065c <HAL_ADC_ConvCpltCallback+0x64>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <HAL_ADC_ConvCpltCallback+0x68>)
 8000630:	f003 fef2 	bl	8004418 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 100);
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <HAL_ADC_ConvCpltCallback+0x68>)
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <HAL_ADC_ConvCpltCallback+0x68>)
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000644:	f003 fb73 	bl	8003d2e <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001ac 	.word	0x200001ac
 8000654:	200001b0 	.word	0x200001b0
 8000658:	20000120 	.word	0x20000120
 800065c:	08004d78 	.word	0x08004d78
 8000660:	200001b4 	.word	0x200001b4
 8000664:	20000168 	.word	0x20000168

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fbe0 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f82e 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f9ac 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000678:	f000 f98a 	bl	8000990 <MX_DMA_Init>
  MX_ADC1_Init();
 800067c:	f000 f896 	bl	80007ac <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f95c 	bl	800093c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000684:	f000 f8e4 	bl	8000850 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000688:	2100      	movs	r1, #0
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0x5c>)
 800068c:	f002 fd24 	bl	80030d8 <HAL_TIM_PWM_Start>
#if CALIB
  htim2.Instance->CCR1 = 150;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <main+0x5c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2296      	movs	r2, #150	; 0x96
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(2000); //wait for one beep
 8000698:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069c:	f000 fc3a 	bl	8000f14 <HAL_Delay>
  htim2.Instance->CCR1 = 75;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <main+0x5c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	224b      	movs	r2, #75	; 0x4b
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000); //wait fir 2beeps
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fc32 	bl	8000f14 <HAL_Delay>
  htim2.Instance->CCR1 = 0;
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <main+0x5c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
#endif

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buff, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	4903      	ldr	r1, [pc, #12]	; (80006c8 <main+0x60>)
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <main+0x64>)
 80006be:	f000 fc91 	bl	8000fe4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0x5a>
 80006c4:	20000120 	.word	0x20000120
 80006c8:	200001ac 	.word	0x200001ac
 80006cc:	20000078 	.word	0x20000078

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 feba 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xd4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <SystemClock_Config+0xd4>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xd4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemClock_Config+0xd8>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000748:	235a      	movs	r3, #90	; 0x5a
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f002 f975 	bl	8002a4c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000768:	f000 f976 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fe14 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000796:	f000 f95f 	bl	8000a58 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC1_Init+0x98>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC1_Init+0x98>)
 80007d8:	2201      	movs	r2, #1
 80007da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC1_Init+0x98>)
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_ADC1_Init+0xa0>)
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_ADC1_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC1_Init+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <MX_ADC1_Init+0x98>)
 800080c:	f000 fba6 	bl	8000f5c <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f91f 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000822:	2305      	movs	r3, #5
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_ADC1_Init+0x98>)
 800082c:	f000 fcfe 	bl	800122c <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000836:	f000 f90f 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000078 	.word	0x20000078
 8000848:	40012000 	.word	0x40012000
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_TIM2_Init+0xe8>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 8000888:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_TIM2_Init+0xe8>)
 800088a:	f240 7207 	movw	r2, #1799	; 0x707
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_TIM2_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM2_Init+0xe8>)
 8000898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4823      	ldr	r0, [pc, #140]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008ac:	f002 fb6c 	bl	8002f88 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f8cf 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008c8:	f002 fd90 	bl	80033ec <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008d2:	f000 f8c1 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008d8:	f002 fba5 	bl	8003026 <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008e2:	f000 f8b9 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	4619      	mov	r1, r3
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <MX_TIM2_Init+0xe8>)
 80008f6:	f003 f951 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000900:	f000 f8aa 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	; 0x60
 8000906:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM2_Init+0xe8>)
 800091c:	f002 fca4 	bl	8003268 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000926:	f000 f897 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM2_Init+0xe8>)
 800092c:	f000 f95a 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	; 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000120 	.word	0x20000120

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f003 f98e 	bl	8003c94 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f86b 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000168 	.word	0x20000168
 800098c:	40004400 	.word	0x40004400

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <MX_DMA_Init+0x3c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_DMA_Init+0x3c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2038      	movs	r0, #56	; 0x38
 80009b8:	f000 ffc3 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009bc:	2038      	movs	r0, #56	; 0x38
 80009be:	f000 ffdc 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_GPIO_Init+0x84>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <MX_GPIO_Init+0x84>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x84>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x84>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <MX_GPIO_Init+0x84>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x84>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 ff42 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <HAL_ADC_MspInit+0xdc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d157      	bne.n	8000b86 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b12:	2303      	movs	r3, #3
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <HAL_ADC_MspInit+0xe4>)
 8000b22:	f001 fab5 	bl	8002090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_ADC_MspInit+0xec>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b6c:	f000 ff20 	bl	80019b0 <HAL_DMA_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b76:	f7ff ff6f 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40012000 	.word	0x40012000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	40026410 	.word	0x40026410

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d11d      	bne.n	8000c42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_TIM_MspPostInit+0x68>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_TIM_MspPostInit+0x68>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_TIM_MspPostInit+0x68>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c22:	2320      	movs	r3, #32
 8000c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <HAL_TIM_MspPostInit+0x6c>)
 8000c3e:	f001 fa27 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_UART_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0x8c>)
 8000cca:	f001 f9e1 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8d0 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <DMA2_Stream0_IRQHandler+0x10>)
 8000d3e:	f000 ff3d 	bl	8001bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000c0 	.word	0x200000c0

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f003 fb74 	bl	8004468 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000218 	.word	0x20000218
 8000db4:	20000368 	.word	0x20000368

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fb33 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fc2b 	bl	8000668 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e20:	08004de8 	.word	0x08004de8
  ldr r2, =_sbss
 8000e24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e28:	20000368 	.word	0x20000368

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fd67 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fdfe 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fd7f 	bl	8001996 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 fd47 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000021c 	.word	0x2000021c

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000021c 	.word	0x2000021c

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e033      	b.n	8000fda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd9a 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa2:	f023 0302 	bic.w	r3, r3, #2
 8000fa6:	f043 0202 	orr.w	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa6e 	bl	8001490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f023 0303 	bic.w	r3, r3, #3
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fca:	e001      	b.n	8000fd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_Start_DMA+0x1e>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e0e9      	b.n	80011d6 <HAL_ADC_Start_DMA+0x1f2>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d018      	beq.n	800104a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001028:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_ADC_Start_DMA+0x1fc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6d      	ldr	r2, [pc, #436]	; (80011e4 <HAL_ADC_Start_DMA+0x200>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9a      	lsrs	r2, r3, #18
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3b01      	subs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001058:	d107      	bne.n	800106a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001068:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	f040 80a1 	bne.w	80011bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b8:	d106      	bne.n	80010c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f023 0206 	bic.w	r2, r3, #6
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	645a      	str	r2, [r3, #68]	; 0x44
 80010c6:	e002      	b.n	80010ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d6:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <HAL_ADC_Start_DMA+0x204>)
 80010d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	4a43      	ldr	r2, [pc, #268]	; (80011ec <HAL_ADC_Start_DMA+0x208>)
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <HAL_ADC_Start_DMA+0x20c>)
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <HAL_ADC_Start_DMA+0x210>)
 80010f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800110a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	334c      	adds	r3, #76	; 0x4c
 8001126:	4619      	mov	r1, r3
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f000 fcee 	bl	8001b0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	2b00      	cmp	r3, #0
 800113a:	d12a      	bne.n	8001192 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <HAL_ADC_Start_DMA+0x214>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d015      	beq.n	8001172 <HAL_ADC_Start_DMA+0x18e>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a2c      	ldr	r2, [pc, #176]	; (80011fc <HAL_ADC_Start_DMA+0x218>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d105      	bne.n	800115c <HAL_ADC_Start_DMA+0x178>
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_ADC_Start_DMA+0x204>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <HAL_ADC_Start_DMA+0x21c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d136      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_ADC_Start_DMA+0x204>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d130      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d129      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e020      	b.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_ADC_Start_DMA+0x214>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d11b      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d114      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e00b      	b.n	80011d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f043 0210 	orr.w	r2, r3, #16
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	40012300 	.word	0x40012300
 80011ec:	08001689 	.word	0x08001689
 80011f0:	08001743 	.word	0x08001743
 80011f4:	0800175f 	.word	0x0800175f
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40012100 	.word	0x40012100
 8001200:	40012200 	.word	0x40012200

08001204 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1c>
 8001244:	2302      	movs	r3, #2
 8001246:	e113      	b.n	8001470 <HAL_ADC_ConfigChannel+0x244>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b09      	cmp	r3, #9
 8001256:	d925      	bls.n	80012a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68d9      	ldr	r1, [r3, #12]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	3b1e      	subs	r3, #30
 800126e:	2207      	movs	r2, #7
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43da      	mvns	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	400a      	ands	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68d9      	ldr	r1, [r3, #12]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	4603      	mov	r3, r0
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4403      	add	r3, r0
 8001296:	3b1e      	subs	r3, #30
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e022      	b.n	80012ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	2207      	movs	r2, #7
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4403      	add	r3, r0
 80012e0:	409a      	lsls	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d824      	bhi.n	800133c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	3b05      	subs	r3, #5
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b05      	subs	r3, #5
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
 800133a:	e04c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d824      	bhi.n	800138e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b23      	subs	r3, #35	; 0x23
 8001356:	221f      	movs	r2, #31
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43da      	mvns	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	400a      	ands	r2, r1
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b23      	subs	r3, #35	; 0x23
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
 800138c:	e023      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b41      	subs	r3, #65	; 0x41
 80013a0:	221f      	movs	r2, #31
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3b41      	subs	r3, #65	; 0x41
 80013ca:	fa00 f203 	lsl.w	r2, r0, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_ADC_ConfigChannel+0x250>)
 80013d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_ADC_ConfigChannel+0x254>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10f      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d8>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_ADC_ConfigChannel+0x254>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <HAL_ADC_ConfigChannel+0x258>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_ADC_ConfigChannel+0x1f4>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b11      	cmp	r3, #17
 800141e:	d122      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x258>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d111      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_ADC_ConfigChannel+0x25c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_ADC_ConfigChannel+0x260>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9a      	lsrs	r2, r3, #18
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	e002      	b.n	8001460 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3b01      	subs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40012300 	.word	0x40012300
 8001480:	40012000 	.word	0x40012000
 8001484:	10000012 	.word	0x10000012
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <ADC_Init+0x1f0>)
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	021a      	lsls	r2, r3, #8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <ADC_Init+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d022      	beq.n	800156e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	e00f      	b.n	800158e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800158c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0202 	bic.w	r2, r2, #2
 800159c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e1b      	ldrb	r3, [r3, #24]
 80015a8:	005a      	lsls	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	3b01      	subs	r3, #1
 80015e8:	035a      	lsls	r2, r3, #13
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e007      	b.n	8001604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	3b01      	subs	r3, #1
 8001620:	051a      	lsls	r2, r3, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001646:	025a      	lsls	r2, r3, #9
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	029a      	lsls	r2, r3, #10
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40012300 	.word	0x40012300
 8001684:	0f000001 	.word	0x0f000001

08001688 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d13c      	bne.n	800171c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d12b      	bne.n	8001714 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d127      	bne.n	8001714 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d119      	bne.n	8001714 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0220 	bic.w	r2, r2, #32
 80016ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7fe ff6f 	bl	80005f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800171a:	e00e      	b.n	800173a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fd75 	bl	8001218 <HAL_ADC_ErrorCallback>
}
 800172e:	e004      	b.n	800173a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fd57 	bl	8001204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f043 0204 	orr.w	r2, r3, #4
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fd4a 	bl	8001218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff fa9e 	bl	8000efc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e099      	b.n	8001b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ec:	e00f      	b.n	8001a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ee:	f7ff fa85 	bl	8000efc <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d908      	bls.n	8001a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e078      	b.n	8001b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e8      	bne.n	80019ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_DMA_Init+0x158>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d107      	bne.n	8001a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4313      	orrs	r3, r2
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f023 0307 	bic.w	r3, r3, #7
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d117      	bne.n	8001ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fa6f 	bl	8001f98 <DMA_CheckFifoParam>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e016      	b.n	8001b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa26 	bl	8001f2c <DMA_CalcBaseAndBitshift>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	223f      	movs	r2, #63	; 0x3f
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	f010803f 	.word	0xf010803f

08001b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA_Start_IT+0x26>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e040      	b.n	8001bb4 <HAL_DMA_Start_IT+0xa8>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d12f      	bne.n	8001ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9b8 	bl	8001ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	223f      	movs	r2, #63	; 0x3f
 8001b66:	409a      	lsls	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0216 	orr.w	r2, r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0208 	orr.w	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e005      	b.n	8001bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bc8:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_DMA_IRQHandler+0x248>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a8e      	ldr	r2, [pc, #568]	; (8001e08 <HAL_DMA_IRQHandler+0x24c>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0a9b      	lsrs	r3, r3, #10
 8001bd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2208      	movs	r2, #8
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01a      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2208      	movs	r2, #8
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	2204      	movs	r2, #4
 8001c64:	409a      	lsls	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2204      	movs	r2, #4
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2210      	movs	r2, #16
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d043      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03c      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d018      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d024      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
 8001cea:	e01f      	b.n	8001d2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e016      	b.n	8001d2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2220      	movs	r2, #32
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 808f 	beq.w	8001e5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8087 	beq.w	8001e5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2220      	movs	r2, #32
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d136      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0216 	bic.w	r2, r2, #22
 8001d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <HAL_DMA_IRQHandler+0x1da>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0208 	bic.w	r2, r2, #8
 8001da4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	223f      	movs	r2, #63	; 0x3f
 8001dac:	409a      	lsls	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d07e      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
        }
        return;
 8001dd2:	e079      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d031      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
 8001e00:	e02c      	b.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	e01e      	b.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10f      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0210 	bic.w	r2, r2, #16
 8001e3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d032      	beq.n	8001eca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d022      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2205      	movs	r2, #5
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d307      	bcc.n	8001ea4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f2      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x2cc>
 8001ea2:	e000      	b.n	8001ea6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ea4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ec8:	bf00      	nop
    }
  }
}
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d108      	bne.n	8001f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f0e:	e007      	b.n	8001f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3b10      	subs	r3, #16
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <DMA_CalcBaseAndBitshift+0x68>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d909      	bls.n	8001f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f6c:	e007      	b.n	8001f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	aaaaaaab 	.word	0xaaaaaaab
 8001f94:	08004d9c 	.word	0x08004d9c

08001f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11f      	bne.n	8001ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d856      	bhi.n	8002066 <DMA_CheckFifoParam+0xce>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <DMA_CheckFifoParam+0x28>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fe3 	.word	0x08001fe3
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08002067 	.word	0x08002067
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d046      	beq.n	800206a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe0:	e043      	b.n	800206a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fea:	d140      	bne.n	800206e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e03d      	b.n	800206e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffa:	d121      	bne.n	8002040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d837      	bhi.n	8002072 <DMA_CheckFifoParam+0xda>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <DMA_CheckFifoParam+0x70>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	0800201f 	.word	0x0800201f
 8002010:	08002019 	.word	0x08002019
 8002014:	08002031 	.word	0x08002031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e030      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d025      	beq.n	8002076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202e:	e022      	b.n	8002076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002038:	d11f      	bne.n	800207a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800203e:	e01c      	b.n	800207a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d903      	bls.n	800204e <DMA_CheckFifoParam+0xb6>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d003      	beq.n	8002054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800204c:	e018      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      break;
 8002052:	e015      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      break;
 8002064:	e00b      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002066:	bf00      	nop
 8002068:	e00a      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e008      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e006      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
 8002074:	e004      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;   
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
    }
  } 
  
  return status; 
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e165      	b.n	8002378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8154 	bne.w	8002372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ae 	beq.w	8002372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_GPIO_Init+0x300>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <HAL_GPIO_Init+0x300>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_GPIO_Init+0x300>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x308>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_GPIO_Init+0x30c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_GPIO_Init+0x310>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x314>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x20e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_GPIO_Init+0x318>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x20a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_GPIO_Init+0x31c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x206>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a49      	ldr	r2, [pc, #292]	; (80023b0 <HAL_GPIO_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x202>
 800228e:	2306      	movs	r3, #6
 8002290:	e00c      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 8002292:	2307      	movs	r3, #7
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 8002296:	2305      	movs	r3, #5
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 800229a:	2304      	movs	r3, #4
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	; (8002394 <HAL_GPIO_Init+0x304>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_GPIO_Init+0x324>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <HAL_GPIO_Init+0x324>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_GPIO_Init+0x324>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002342:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f ae96 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40021400 	.word	0x40021400
 80023b0:	40021800 	.word	0x40021800
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0cc      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d90c      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b63      	ldr	r3, [pc, #396]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b8      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800240c:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	494d      	ldr	r1, [pc, #308]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d044      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d119      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e07f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d003      	beq.n	8002476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e067      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4934      	ldr	r1, [pc, #208]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fd28 	bl	8000efc <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fd24 	bl	8000efc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e04f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d20c      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e032      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4916      	ldr	r1, [pc, #88]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	490e      	ldr	r1, [pc, #56]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253e:	f000 f855 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8002542:	4602      	mov	r2, r0
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	490a      	ldr	r1, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	5ccb      	ldrb	r3, [r1, r3]
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fc88 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00
 8002574:	40023800 	.word	0x40023800
 8002578:	08004d84 	.word	0x08004d84
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_GetHCLKFreq+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff0 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08004d94 	.word	0x08004d94

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffdc 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0b5b      	lsrs	r3, r3, #13
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	08004d94 	.word	0x08004d94

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b0ae      	sub	sp, #184	; 0xb8
 80025f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002612:	4bcb      	ldr	r3, [pc, #812]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b0c      	cmp	r3, #12
 800261c:	f200 8206 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x440>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	0800265d 	.word	0x0800265d
 800262c:	08002a2d 	.word	0x08002a2d
 8002630:	08002a2d 	.word	0x08002a2d
 8002634:	08002a2d 	.word	0x08002a2d
 8002638:	08002665 	.word	0x08002665
 800263c:	08002a2d 	.word	0x08002a2d
 8002640:	08002a2d 	.word	0x08002a2d
 8002644:	08002a2d 	.word	0x08002a2d
 8002648:	0800266d 	.word	0x0800266d
 800264c:	08002a2d 	.word	0x08002a2d
 8002650:	08002a2d 	.word	0x08002a2d
 8002654:	08002a2d 	.word	0x08002a2d
 8002658:	0800285d 	.word	0x0800285d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4bb9      	ldr	r3, [pc, #740]	; (8002944 <HAL_RCC_GetSysClockFreq+0x358>)
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002662:	e1e7      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002664:	4bb8      	ldr	r3, [pc, #736]	; (8002948 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800266a:	e1e3      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266c:	4bb4      	ldr	r3, [pc, #720]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002678:	4bb1      	ldr	r3, [pc, #708]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d071      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002684:	4bae      	ldr	r3, [pc, #696]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002690:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026aa:	4622      	mov	r2, r4
 80026ac:	462b      	mov	r3, r5
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	0159      	lsls	r1, r3, #5
 80026b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026bc:	0150      	lsls	r0, r2, #5
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4621      	mov	r1, r4
 80026c4:	1a51      	subs	r1, r2, r1
 80026c6:	6439      	str	r1, [r7, #64]	; 0x40
 80026c8:	4629      	mov	r1, r5
 80026ca:	eb63 0301 	sbc.w	r3, r3, r1
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026dc:	4649      	mov	r1, r9
 80026de:	018b      	lsls	r3, r1, #6
 80026e0:	4641      	mov	r1, r8
 80026e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e6:	4641      	mov	r1, r8
 80026e8:	018a      	lsls	r2, r1, #6
 80026ea:	4641      	mov	r1, r8
 80026ec:	1a51      	subs	r1, r2, r1
 80026ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80026f0:	4649      	mov	r1, r9
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002704:	4649      	mov	r1, r9
 8002706:	00cb      	lsls	r3, r1, #3
 8002708:	4641      	mov	r1, r8
 800270a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800270e:	4641      	mov	r1, r8
 8002710:	00ca      	lsls	r2, r1, #3
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	4603      	mov	r3, r0
 8002718:	4622      	mov	r2, r4
 800271a:	189b      	adds	r3, r3, r2
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
 800271e:	462b      	mov	r3, r5
 8002720:	460a      	mov	r2, r1
 8002722:	eb42 0303 	adc.w	r3, r2, r3
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002734:	4629      	mov	r1, r5
 8002736:	024b      	lsls	r3, r1, #9
 8002738:	4621      	mov	r1, r4
 800273a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800273e:	4621      	mov	r1, r4
 8002740:	024a      	lsls	r2, r1, #9
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800274a:	2200      	movs	r2, #0
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002754:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002758:	f7fd fdb2 	bl	80002c0 <__aeabi_uldivmod>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4613      	mov	r3, r2
 8002762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002766:	e067      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	2200      	movs	r2, #0
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002780:	67bb      	str	r3, [r7, #120]	; 0x78
 8002782:	2300      	movs	r3, #0
 8002784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002786:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800278a:	4622      	mov	r2, r4
 800278c:	462b      	mov	r3, r5
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0159      	lsls	r1, r3, #5
 8002798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279c:	0150      	lsls	r0, r2, #5
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4621      	mov	r1, r4
 80027a4:	1a51      	subs	r1, r2, r1
 80027a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80027a8:	4629      	mov	r1, r5
 80027aa:	eb63 0301 	sbc.w	r3, r3, r1
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80027bc:	4649      	mov	r1, r9
 80027be:	018b      	lsls	r3, r1, #6
 80027c0:	4641      	mov	r1, r8
 80027c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c6:	4641      	mov	r1, r8
 80027c8:	018a      	lsls	r2, r1, #6
 80027ca:	4641      	mov	r1, r8
 80027cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80027d0:	4649      	mov	r1, r9
 80027d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ea:	4692      	mov	sl, r2
 80027ec:	469b      	mov	fp, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	eb1a 0303 	adds.w	r3, sl, r3
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	462b      	mov	r3, r5
 80027f8:	eb4b 0303 	adc.w	r3, fp, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800280a:	4629      	mov	r1, r5
 800280c:	028b      	lsls	r3, r1, #10
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002814:	4621      	mov	r1, r4
 8002816:	028a      	lsls	r2, r1, #10
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002820:	2200      	movs	r2, #0
 8002822:	673b      	str	r3, [r7, #112]	; 0x70
 8002824:	677a      	str	r2, [r7, #116]	; 0x74
 8002826:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800282a:	f7fd fd49 	bl	80002c0 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4613      	mov	r3, r2
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800284a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800284e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800285a:	e0eb      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d06b      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	66bb      	str	r3, [r7, #104]	; 0x68
 800287e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002886:	663b      	str	r3, [r7, #96]	; 0x60
 8002888:	2300      	movs	r3, #0
 800288a:	667b      	str	r3, [r7, #100]	; 0x64
 800288c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002890:	4622      	mov	r2, r4
 8002892:	462b      	mov	r3, r5
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0159      	lsls	r1, r3, #5
 800289e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a2:	0150      	lsls	r0, r2, #5
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4621      	mov	r1, r4
 80028aa:	1a51      	subs	r1, r2, r1
 80028ac:	61b9      	str	r1, [r7, #24]
 80028ae:	4629      	mov	r1, r5
 80028b0:	eb63 0301 	sbc.w	r3, r3, r1
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028c2:	4659      	mov	r1, fp
 80028c4:	018b      	lsls	r3, r1, #6
 80028c6:	4651      	mov	r1, sl
 80028c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028cc:	4651      	mov	r1, sl
 80028ce:	018a      	lsls	r2, r1, #6
 80028d0:	4651      	mov	r1, sl
 80028d2:	ebb2 0801 	subs.w	r8, r2, r1
 80028d6:	4659      	mov	r1, fp
 80028d8:	eb63 0901 	sbc.w	r9, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f0:	4690      	mov	r8, r2
 80028f2:	4699      	mov	r9, r3
 80028f4:	4623      	mov	r3, r4
 80028f6:	eb18 0303 	adds.w	r3, r8, r3
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	462b      	mov	r3, r5
 80028fe:	eb49 0303 	adc.w	r3, r9, r3
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002910:	4629      	mov	r1, r5
 8002912:	024b      	lsls	r3, r1, #9
 8002914:	4621      	mov	r1, r4
 8002916:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800291a:	4621      	mov	r1, r4
 800291c:	024a      	lsls	r2, r1, #9
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002926:	2200      	movs	r2, #0
 8002928:	65bb      	str	r3, [r7, #88]	; 0x58
 800292a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800292c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002930:	f7fd fcc6 	bl	80002c0 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293e:	e065      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x420>
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x458>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	2200      	movs	r2, #0
 8002954:	4618      	mov	r0, r3
 8002956:	4611      	mov	r1, r2
 8002958:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800295c:	653b      	str	r3, [r7, #80]	; 0x50
 800295e:	2300      	movs	r3, #0
 8002960:	657b      	str	r3, [r7, #84]	; 0x54
 8002962:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002966:	4642      	mov	r2, r8
 8002968:	464b      	mov	r3, r9
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4641      	mov	r1, r8
 8002980:	1a51      	subs	r1, r2, r1
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	4649      	mov	r1, r9
 8002986:	eb63 0301 	sbc.w	r3, r3, r1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002998:	4659      	mov	r1, fp
 800299a:	018b      	lsls	r3, r1, #6
 800299c:	4651      	mov	r1, sl
 800299e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029a2:	4651      	mov	r1, sl
 80029a4:	018a      	lsls	r2, r1, #6
 80029a6:	4651      	mov	r1, sl
 80029a8:	1a54      	subs	r4, r2, r1
 80029aa:	4659      	mov	r1, fp
 80029ac:	eb63 0501 	sbc.w	r5, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	464b      	mov	r3, r9
 80029cc:	eb45 0303 	adc.w	r3, r5, r3
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029de:	4629      	mov	r1, r5
 80029e0:	028b      	lsls	r3, r1, #10
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e8:	4621      	mov	r1, r4
 80029ea:	028a      	lsls	r2, r1, #10
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f4:	2200      	movs	r2, #0
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029fe:	f7fd fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4613      	mov	r3, r2
 8002a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0f1b      	lsrs	r3, r3, #28
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a2a:	e003      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	37b8      	adds	r7, #184	; 0xb8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400

08002a4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e28d      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8083 	beq.w	8002b72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d019      	beq.n	8002aac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a78:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a84:	4b8e      	ldr	r3, [pc, #568]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a90:	d00c      	beq.n	8002aac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x124>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d157      	bne.n	8002b70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e25a      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x90>
 8002ace:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7b      	ldr	r2, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xcc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0xb4>
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a75      	ldr	r2, [pc, #468]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a72      	ldr	r2, [pc, #456]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xcc>
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6b      	ldr	r2, [pc, #428]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f9ec 	bl	8000efc <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe f9e8 	bl	8000efc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e21f      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xdc>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe f9d8 	bl	8000efc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe f9d4 	bl	8000efc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e20b      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x104>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06f      	beq.n	8002c5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d017      	beq.n	8002bba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b8a:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x186>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1d3      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe f981 	bl	8000efc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f97d 	bl	8000efc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1b4      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4925      	ldr	r1, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f960 	bl	8000efc <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe f95c 	bl	8000efc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e193      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d036      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe f940 	bl	8000efc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe f93c 	bl	8000efc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e173      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x234>
 8002c9e:	e01b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f929 	bl	8000efc <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	e00e      	b.n	8002ccc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cae:	f7fe f925 	bl	8000efc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d907      	bls.n	8002ccc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e15c      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470000 	.word	0x42470000
 8002cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ea      	bne.n	8002cae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8097 	beq.w	8002e14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b83      	ldr	r3, [pc, #524]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b79      	ldr	r3, [pc, #484]	; (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe f8e5 	bl	8000efc <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe f8e1 	bl	8000efc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e118      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x4b0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x31e>
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x358>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x340>
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a60      	ldr	r2, [pc, #384]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a5d      	ldr	r2, [pc, #372]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x358>
 8002d8c:	4b5a      	ldr	r3, [pc, #360]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a59      	ldr	r2, [pc, #356]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe f8a6 	bl	8000efc <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe f8a2 	bl	8000efc <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0d7      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RCC_OscConfig+0x368>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f890 	bl	8000efc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7fe f88c 	bl	8000efc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0c1      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df6:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ee      	bne.n	8002de0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80ad 	beq.w	8002f78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d060      	beq.n	8002eec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d145      	bne.n	8002ebe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f860 	bl	8000efc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f85c 	bl	8000efc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e093      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	071b      	lsls	r3, r3, #28
 8002e8a:	491b      	ldr	r1, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe f831 	bl	8000efc <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe f82d 	bl	8000efc <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e064      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x452>
 8002ebc:	e05c      	b.n	8002f78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_RCC_OscConfig+0x4b4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f81a 	bl	8000efc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe f816 	bl	8000efc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04d      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x480>
 8002eea:	e045      	b.n	8002f78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e040      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_RCC_OscConfig+0x538>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d030      	beq.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d129      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d122      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d119      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e041      	b.n	800301e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fdf8 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 fad8 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e041      	b.n	80030bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f839 	bl	80030c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f000 fa89 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start+0x24>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e022      	b.n	8003142 <HAL_TIM_PWM_Start+0x6a>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d109      	bne.n	8003116 <HAL_TIM_PWM_Start+0x3e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e015      	b.n	8003142 <HAL_TIM_PWM_Start+0x6a>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d109      	bne.n	8003130 <HAL_TIM_PWM_Start+0x58>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e008      	b.n	8003142 <HAL_TIM_PWM_Start+0x6a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07c      	b.n	8003244 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0x82>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	e013      	b.n	8003182 <HAL_TIM_PWM_Start+0xaa>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0x92>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	e00b      	b.n	8003182 <HAL_TIM_PWM_Start+0xaa>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start+0xa2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003178:	e003      	b.n	8003182 <HAL_TIM_PWM_Start+0xaa>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2201      	movs	r2, #1
 8003188:	6839      	ldr	r1, [r7, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fce0 	bl	8003b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_TIM_PWM_Start+0x174>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIM_PWM_Start+0xcc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_TIM_PWM_Start+0x178>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_PWM_Start+0xd0>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_TIM_PWM_Start+0xd2>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_TIM_PWM_Start+0x174>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d01d      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_TIM_PWM_Start+0x17c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_TIM_PWM_Start+0x180>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_TIM_PWM_Start+0x184>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_TIM_PWM_Start+0x178>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_TIM_PWM_Start+0x188>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIM_PWM_Start+0x136>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <HAL_TIM_PWM_Start+0x18c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d111      	bne.n	8003232 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d010      	beq.n	8003242 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	e007      	b.n	8003242 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40010000 	.word	0x40010000
 8003250:	40010400 	.word	0x40010400
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40014000 	.word	0x40014000
 8003264:	40001800 	.word	0x40001800

08003268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003282:	2302      	movs	r3, #2
 8003284:	e0ae      	b.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	f200 809f 	bhi.w	80033d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080033d5 	.word	0x080033d5
 80032a4:	080033d5 	.word	0x080033d5
 80032a8:	080033d5 	.word	0x080033d5
 80032ac:	08003311 	.word	0x08003311
 80032b0:	080033d5 	.word	0x080033d5
 80032b4:	080033d5 	.word	0x080033d5
 80032b8:	080033d5 	.word	0x080033d5
 80032bc:	08003353 	.word	0x08003353
 80032c0:	080033d5 	.word	0x080033d5
 80032c4:	080033d5 	.word	0x080033d5
 80032c8:	080033d5 	.word	0x080033d5
 80032cc:	08003393 	.word	0x08003393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f9f0 	bl	80036bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6999      	ldr	r1, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	619a      	str	r2, [r3, #24]
      break;
 800330e:	e064      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa40 	bl	800379c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	021a      	lsls	r2, r3, #8
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
      break;
 8003350:	e043      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fa95 	bl	8003888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0208 	orr.w	r2, r2, #8
 800336c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0204 	bic.w	r2, r2, #4
 800337c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	61da      	str	r2, [r3, #28]
      break;
 8003390:	e023      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fae9 	bl	8003970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69d9      	ldr	r1, [r3, #28]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	61da      	str	r2, [r3, #28]
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIM_ConfigClockSource+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e0b4      	b.n	8003572 <HAL_TIM_ConfigClockSource+0x186>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003440:	d03e      	beq.n	80034c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	f200 8087 	bhi.w	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	f000 8086 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x172>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d87f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d01a      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xa6>
 800345c:	2b70      	cmp	r3, #112	; 0x70
 800345e:	d87b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d050      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x11a>
 8003464:	2b60      	cmp	r3, #96	; 0x60
 8003466:	d877      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b50      	cmp	r3, #80	; 0x50
 800346a:	d03c      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xfa>
 800346c:	2b50      	cmp	r3, #80	; 0x50
 800346e:	d873      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d058      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x13a>
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d86f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d064      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	2b30      	cmp	r3, #48	; 0x30
 800347e:	d86b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d060      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b20      	cmp	r3, #32
 8003486:	d867      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05c      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b10      	cmp	r3, #16
 800348e:	d05a      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003490:	e062      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f000 fb35 	bl	8003b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	609a      	str	r2, [r3, #8]
      break;
 80034be:	e04f      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f000 fb1e 	bl	8003b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e2:	609a      	str	r2, [r3, #8]
      break;
 80034e4:	e03c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fa92 	bl	8003a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2150      	movs	r1, #80	; 0x50
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 faeb 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 8003504:	e02c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fab1 	bl	8003a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2160      	movs	r1, #96	; 0x60
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fadb 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 8003524:	e01c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fa72 	bl	8003a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	4618      	mov	r0, r3
 8003540:	f000 facb 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 8003544:	e00c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f000 fac2 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 8003556:	e003      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e000      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800355e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a40      	ldr	r2, [pc, #256]	; (8003690 <TIM_Base_SetConfig+0x114>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3b      	ldr	r2, [pc, #236]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3a      	ldr	r2, [pc, #232]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <TIM_Base_SetConfig+0x114>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d027      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d023      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <TIM_Base_SetConfig+0x128>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <TIM_Base_SetConfig+0x12c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <TIM_Base_SetConfig+0x130>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <TIM_Base_SetConfig+0x134>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <TIM_Base_SetConfig+0x138>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <TIM_Base_SetConfig+0x13c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <TIM_Base_SetConfig+0x114>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40010400 	.word	0x40010400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800
 80036b0:	40001800 	.word	0x40001800
 80036b4:	40001c00 	.word	0x40001c00
 80036b8:	40002000 	.word	0x40002000

080036bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f023 0201 	bic.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0302 	bic.w	r3, r3, #2
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <TIM_OC1_SetConfig+0xd8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_OC1_SetConfig+0x64>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <TIM_OC1_SetConfig+0xdc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10c      	bne.n	800373a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0308 	bic.w	r3, r3, #8
 8003726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a15      	ldr	r2, [pc, #84]	; (8003794 <TIM_OC1_SetConfig+0xd8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_OC1_SetConfig+0x8e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC1_SetConfig+0xdc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40010000 	.word	0x40010000
 8003798:	40010400 	.word	0x40010400

0800379c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0210 	bic.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a22      	ldr	r2, [pc, #136]	; (8003880 <TIM_OC2_SetConfig+0xe4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_OC2_SetConfig+0x68>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <TIM_OC2_SetConfig+0xe8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10d      	bne.n	8003820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a17      	ldr	r2, [pc, #92]	; (8003880 <TIM_OC2_SetConfig+0xe4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_OC2_SetConfig+0x94>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <TIM_OC2_SetConfig+0xe8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d113      	bne.n	8003858 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40010400 	.word	0x40010400

08003888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <TIM_OC3_SetConfig+0xe0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC3_SetConfig+0x66>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <TIM_OC3_SetConfig+0xe4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <TIM_OC3_SetConfig+0xe0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_OC3_SetConfig+0x92>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <TIM_OC3_SetConfig+0xe4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d113      	bne.n	8003942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000
 800396c:	40010400 	.word	0x40010400

08003970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <TIM_OC4_SetConfig+0xa4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC4_SetConfig+0x68>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <TIM_OC4_SetConfig+0xa8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d109      	bne.n	80039ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40010400 	.word	0x40010400

08003a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 030a 	bic.w	r3, r3, #10
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0210 	bic.w	r2, r3, #16
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	031b      	lsls	r3, r3, #12
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f043 0307 	orr.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2201      	movs	r2, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e05a      	b.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d01d      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10c      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40001800 	.word	0x40001800

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc ffca 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f929 	bl	8003f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08a      	sub	sp, #40	; 0x28
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d17c      	bne.n	8003e48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Transmit+0x2c>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e075      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x3e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e06e      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2221      	movs	r2, #33	; 0x21
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d82:	f7fd f8bb 	bl	8000efc <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	88fa      	ldrh	r2, [r7, #6]
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d108      	bne.n	8003db0 <HAL_UART_Transmit+0x82>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e003      	b.n	8003db8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dc0:	e02a      	b.n	8003e18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f840 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e036      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3302      	adds	r3, #2
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e007      	b.n	8003e0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1cf      	bne.n	8003dc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f810 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e006      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b090      	sub	sp, #64	; 0x40
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	e050      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d04c      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e72:	f7fd f843 	bl	8000efc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d241      	bcs.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ea2:	637a      	str	r2, [r7, #52]	; 0x34
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed6:	623a      	str	r2, [r7, #32]
 8003ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	69f9      	ldr	r1, [r7, #28]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e5      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d09f      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3740      	adds	r7, #64	; 0x40
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b0c0      	sub	sp, #256	; 0x100
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	68d9      	ldr	r1, [r3, #12]
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	ea40 0301 	orr.w	r3, r0, r1
 8003f58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f88:	f021 010c 	bic.w	r1, r1, #12
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f96:	430b      	orrs	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	6999      	ldr	r1, [r3, #24]
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	ea40 0301 	orr.w	r3, r0, r1
 8003fb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <UART_SetConfig+0x2cc>)
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d005      	beq.n	8003fd0 <UART_SetConfig+0xa0>
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b8d      	ldr	r3, [pc, #564]	; (8004200 <UART_SetConfig+0x2d0>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d104      	bne.n	8003fda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7fe faf8 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fd8:	e003      	b.n	8003fe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fda:	f7fe fadf 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003fde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	f040 810c 	bne.w	8004208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ffa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	1891      	adds	r1, r2, r2
 8004008:	65b9      	str	r1, [r7, #88]	; 0x58
 800400a:	415b      	adcs	r3, r3
 800400c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004012:	4621      	mov	r1, r4
 8004014:	eb12 0801 	adds.w	r8, r2, r1
 8004018:	4629      	mov	r1, r5
 800401a:	eb43 0901 	adc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004040:	462b      	mov	r3, r5
 8004042:	eb49 0303 	adc.w	r3, r9, r3
 8004046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004056:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800405a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800405e:	460b      	mov	r3, r1
 8004060:	18db      	adds	r3, r3, r3
 8004062:	653b      	str	r3, [r7, #80]	; 0x50
 8004064:	4613      	mov	r3, r2
 8004066:	eb42 0303 	adc.w	r3, r2, r3
 800406a:	657b      	str	r3, [r7, #84]	; 0x54
 800406c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004074:	f7fc f924 	bl	80002c0 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4b61      	ldr	r3, [pc, #388]	; (8004204 <UART_SetConfig+0x2d4>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	011c      	lsls	r4, r3, #4
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004090:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	1891      	adds	r1, r2, r2
 800409e:	64b9      	str	r1, [r7, #72]	; 0x48
 80040a0:	415b      	adcs	r3, r3
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040a8:	4641      	mov	r1, r8
 80040aa:	eb12 0a01 	adds.w	sl, r2, r1
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0b01 	adc.w	fp, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c8:	4692      	mov	sl, r2
 80040ca:	469b      	mov	fp, r3
 80040cc:	4643      	mov	r3, r8
 80040ce:	eb1a 0303 	adds.w	r3, sl, r3
 80040d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d6:	464b      	mov	r3, r9
 80040d8:	eb4b 0303 	adc.w	r3, fp, r3
 80040dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	643b      	str	r3, [r7, #64]	; 0x40
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800410a:	f7fc f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4611      	mov	r1, r2
 8004114:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <UART_SetConfig+0x2d4>)
 8004116:	fba3 2301 	umull	r2, r3, r3, r1
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2264      	movs	r2, #100	; 0x64
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	1acb      	subs	r3, r1, r3
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <UART_SetConfig+0x2d4>)
 800412c:	fba3 2302 	umull	r2, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004138:	441c      	add	r4, r3
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004144:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	63b9      	str	r1, [r7, #56]	; 0x38
 8004154:	415b      	adcs	r3, r3
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800415c:	4641      	mov	r1, r8
 800415e:	1851      	adds	r1, r2, r1
 8004160:	6339      	str	r1, [r7, #48]	; 0x30
 8004162:	4649      	mov	r1, r9
 8004164:	414b      	adcs	r3, r1
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004174:	4659      	mov	r1, fp
 8004176:	00cb      	lsls	r3, r1, #3
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417e:	4651      	mov	r1, sl
 8004180:	00ca      	lsls	r2, r1, #3
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	4603      	mov	r3, r0
 8004188:	4642      	mov	r2, r8
 800418a:	189b      	adds	r3, r3, r2
 800418c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041b0:	460b      	mov	r3, r1
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b6:	4613      	mov	r3, r2
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041c6:	f7fc f87b 	bl	80002c0 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <UART_SetConfig+0x2d4>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	3332      	adds	r3, #50	; 0x32
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <UART_SetConfig+0x2d4>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 0207 	and.w	r2, r3, #7
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4422      	add	r2, r4
 80041f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f8:	e106      	b.n	8004408 <UART_SetConfig+0x4d8>
 80041fa:	bf00      	nop
 80041fc:	40011000 	.word	0x40011000
 8004200:	40011400 	.word	0x40011400
 8004204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004212:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800421a:	4642      	mov	r2, r8
 800421c:	464b      	mov	r3, r9
 800421e:	1891      	adds	r1, r2, r2
 8004220:	6239      	str	r1, [r7, #32]
 8004222:	415b      	adcs	r3, r3
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
 8004226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800422a:	4641      	mov	r1, r8
 800422c:	1854      	adds	r4, r2, r1
 800422e:	4649      	mov	r1, r9
 8004230:	eb43 0501 	adc.w	r5, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	00eb      	lsls	r3, r5, #3
 800423e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004242:	00e2      	lsls	r2, r4, #3
 8004244:	4614      	mov	r4, r2
 8004246:	461d      	mov	r5, r3
 8004248:	4643      	mov	r3, r8
 800424a:	18e3      	adds	r3, r4, r3
 800424c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004250:	464b      	mov	r3, r9
 8004252:	eb45 0303 	adc.w	r3, r5, r3
 8004256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004276:	4629      	mov	r1, r5
 8004278:	008b      	lsls	r3, r1, #2
 800427a:	4621      	mov	r1, r4
 800427c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004280:	4621      	mov	r1, r4
 8004282:	008a      	lsls	r2, r1, #2
 8004284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004288:	f7fc f81a 	bl	80002c0 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b60      	ldr	r3, [pc, #384]	; (8004414 <UART_SetConfig+0x4e4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	61b9      	str	r1, [r7, #24]
 80042b4:	415b      	adcs	r3, r3
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6139      	str	r1, [r7, #16]
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	67bb      	str	r3, [r7, #120]	; 0x78
 8004306:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004314:	4649      	mov	r1, r9
 8004316:	008b      	lsls	r3, r1, #2
 8004318:	4641      	mov	r1, r8
 800431a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431e:	4641      	mov	r1, r8
 8004320:	008a      	lsls	r2, r1, #2
 8004322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004326:	f7fb ffcb 	bl	80002c0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4611      	mov	r1, r2
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <UART_SetConfig+0x4e4>)
 8004332:	fba3 2301 	umull	r2, r3, r3, r1
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2264      	movs	r2, #100	; 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	1acb      	subs	r3, r1, r3
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	3332      	adds	r3, #50	; 0x32
 8004344:	4a33      	ldr	r2, [pc, #204]	; (8004414 <UART_SetConfig+0x4e4>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004350:	441c      	add	r4, r3
 8004352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004356:	2200      	movs	r2, #0
 8004358:	673b      	str	r3, [r7, #112]	; 0x70
 800435a:	677a      	str	r2, [r7, #116]	; 0x74
 800435c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	415b      	adcs	r3, r3
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a2:	464b      	mov	r3, r9
 80043a4:	460a      	mov	r2, r1
 80043a6:	eb42 0303 	adc.w	r3, r2, r3
 80043aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	663b      	str	r3, [r7, #96]	; 0x60
 80043b6:	667a      	str	r2, [r7, #100]	; 0x64
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043c4:	4649      	mov	r1, r9
 80043c6:	008b      	lsls	r3, r1, #2
 80043c8:	4641      	mov	r1, r8
 80043ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ce:	4641      	mov	r1, r8
 80043d0:	008a      	lsls	r2, r1, #2
 80043d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043d6:	f7fb ff73 	bl	80002c0 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <UART_SetConfig+0x4e4>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <UART_SetConfig+0x4e4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 020f 	and.w	r2, r3, #15
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	bf00      	nop
 800440a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004414:	51eb851f 	.word	0x51eb851f

08004418 <siprintf>:
 8004418:	b40e      	push	{r1, r2, r3}
 800441a:	b500      	push	{lr}
 800441c:	b09c      	sub	sp, #112	; 0x70
 800441e:	ab1d      	add	r3, sp, #116	; 0x74
 8004420:	9002      	str	r0, [sp, #8]
 8004422:	9006      	str	r0, [sp, #24]
 8004424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004428:	4809      	ldr	r0, [pc, #36]	; (8004450 <siprintf+0x38>)
 800442a:	9107      	str	r1, [sp, #28]
 800442c:	9104      	str	r1, [sp, #16]
 800442e:	4909      	ldr	r1, [pc, #36]	; (8004454 <siprintf+0x3c>)
 8004430:	f853 2b04 	ldr.w	r2, [r3], #4
 8004434:	9105      	str	r1, [sp, #20]
 8004436:	6800      	ldr	r0, [r0, #0]
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	a902      	add	r1, sp, #8
 800443c:	f000 f992 	bl	8004764 <_svfiprintf_r>
 8004440:	9b02      	ldr	r3, [sp, #8]
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	b01c      	add	sp, #112	; 0x70
 8004448:	f85d eb04 	ldr.w	lr, [sp], #4
 800444c:	b003      	add	sp, #12
 800444e:	4770      	bx	lr
 8004450:	20000058 	.word	0x20000058
 8004454:	ffff0208 	.word	0xffff0208

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000058 	.word	0x20000058

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4d0d      	ldr	r5, [pc, #52]	; (80044ac <__libc_init_array+0x38>)
 8004478:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447a:	1b64      	subs	r4, r4, r5
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	2600      	movs	r6, #0
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	4d0b      	ldr	r5, [pc, #44]	; (80044b4 <__libc_init_array+0x40>)
 8004486:	4c0c      	ldr	r4, [pc, #48]	; (80044b8 <__libc_init_array+0x44>)
 8004488:	f000 fc6a 	bl	8004d60 <_init>
 800448c:	1b64      	subs	r4, r4, r5
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	2600      	movs	r6, #0
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f855 3b04 	ldr.w	r3, [r5], #4
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08004de0 	.word	0x08004de0
 80044b0:	08004de0 	.word	0x08004de0
 80044b4:	08004de0 	.word	0x08004de0
 80044b8:	08004de4 	.word	0x08004de4

080044bc <__retarget_lock_acquire_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_release_recursive>:
 80044be:	4770      	bx	lr

080044c0 <_free_r>:
 80044c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044c2:	2900      	cmp	r1, #0
 80044c4:	d044      	beq.n	8004550 <_free_r+0x90>
 80044c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ca:	9001      	str	r0, [sp, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f1a1 0404 	sub.w	r4, r1, #4
 80044d2:	bfb8      	it	lt
 80044d4:	18e4      	addlt	r4, r4, r3
 80044d6:	f000 f8df 	bl	8004698 <__malloc_lock>
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <_free_r+0x94>)
 80044dc:	9801      	ldr	r0, [sp, #4]
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	b933      	cbnz	r3, 80044f0 <_free_r+0x30>
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	6014      	str	r4, [r2, #0]
 80044e6:	b003      	add	sp, #12
 80044e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044ec:	f000 b8da 	b.w	80046a4 <__malloc_unlock>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d908      	bls.n	8004506 <_free_r+0x46>
 80044f4:	6825      	ldr	r5, [r4, #0]
 80044f6:	1961      	adds	r1, r4, r5
 80044f8:	428b      	cmp	r3, r1
 80044fa:	bf01      	itttt	eq
 80044fc:	6819      	ldreq	r1, [r3, #0]
 80044fe:	685b      	ldreq	r3, [r3, #4]
 8004500:	1949      	addeq	r1, r1, r5
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	e7ed      	b.n	80044e2 <_free_r+0x22>
 8004506:	461a      	mov	r2, r3
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b10b      	cbz	r3, 8004510 <_free_r+0x50>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d9fa      	bls.n	8004506 <_free_r+0x46>
 8004510:	6811      	ldr	r1, [r2, #0]
 8004512:	1855      	adds	r5, r2, r1
 8004514:	42a5      	cmp	r5, r4
 8004516:	d10b      	bne.n	8004530 <_free_r+0x70>
 8004518:	6824      	ldr	r4, [r4, #0]
 800451a:	4421      	add	r1, r4
 800451c:	1854      	adds	r4, r2, r1
 800451e:	42a3      	cmp	r3, r4
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	d1e0      	bne.n	80044e6 <_free_r+0x26>
 8004524:	681c      	ldr	r4, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	6053      	str	r3, [r2, #4]
 800452a:	440c      	add	r4, r1
 800452c:	6014      	str	r4, [r2, #0]
 800452e:	e7da      	b.n	80044e6 <_free_r+0x26>
 8004530:	d902      	bls.n	8004538 <_free_r+0x78>
 8004532:	230c      	movs	r3, #12
 8004534:	6003      	str	r3, [r0, #0]
 8004536:	e7d6      	b.n	80044e6 <_free_r+0x26>
 8004538:	6825      	ldr	r5, [r4, #0]
 800453a:	1961      	adds	r1, r4, r5
 800453c:	428b      	cmp	r3, r1
 800453e:	bf04      	itt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	bf04      	itt	eq
 8004548:	1949      	addeq	r1, r1, r5
 800454a:	6021      	streq	r1, [r4, #0]
 800454c:	6054      	str	r4, [r2, #4]
 800454e:	e7ca      	b.n	80044e6 <_free_r+0x26>
 8004550:	b003      	add	sp, #12
 8004552:	bd30      	pop	{r4, r5, pc}
 8004554:	20000360 	.word	0x20000360

08004558 <sbrk_aligned>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4e0e      	ldr	r6, [pc, #56]	; (8004594 <sbrk_aligned+0x3c>)
 800455c:	460c      	mov	r4, r1
 800455e:	6831      	ldr	r1, [r6, #0]
 8004560:	4605      	mov	r5, r0
 8004562:	b911      	cbnz	r1, 800456a <sbrk_aligned+0x12>
 8004564:	f000 fba6 	bl	8004cb4 <_sbrk_r>
 8004568:	6030      	str	r0, [r6, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	4628      	mov	r0, r5
 800456e:	f000 fba1 	bl	8004cb4 <_sbrk_r>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d00a      	beq.n	800458c <sbrk_aligned+0x34>
 8004576:	1cc4      	adds	r4, r0, #3
 8004578:	f024 0403 	bic.w	r4, r4, #3
 800457c:	42a0      	cmp	r0, r4
 800457e:	d007      	beq.n	8004590 <sbrk_aligned+0x38>
 8004580:	1a21      	subs	r1, r4, r0
 8004582:	4628      	mov	r0, r5
 8004584:	f000 fb96 	bl	8004cb4 <_sbrk_r>
 8004588:	3001      	adds	r0, #1
 800458a:	d101      	bne.n	8004590 <sbrk_aligned+0x38>
 800458c:	f04f 34ff 	mov.w	r4, #4294967295
 8004590:	4620      	mov	r0, r4
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	20000364 	.word	0x20000364

08004598 <_malloc_r>:
 8004598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800459c:	1ccd      	adds	r5, r1, #3
 800459e:	f025 0503 	bic.w	r5, r5, #3
 80045a2:	3508      	adds	r5, #8
 80045a4:	2d0c      	cmp	r5, #12
 80045a6:	bf38      	it	cc
 80045a8:	250c      	movcc	r5, #12
 80045aa:	2d00      	cmp	r5, #0
 80045ac:	4607      	mov	r7, r0
 80045ae:	db01      	blt.n	80045b4 <_malloc_r+0x1c>
 80045b0:	42a9      	cmp	r1, r5
 80045b2:	d905      	bls.n	80045c0 <_malloc_r+0x28>
 80045b4:	230c      	movs	r3, #12
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	2600      	movs	r6, #0
 80045ba:	4630      	mov	r0, r6
 80045bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004694 <_malloc_r+0xfc>
 80045c4:	f000 f868 	bl	8004698 <__malloc_lock>
 80045c8:	f8d8 3000 	ldr.w	r3, [r8]
 80045cc:	461c      	mov	r4, r3
 80045ce:	bb5c      	cbnz	r4, 8004628 <_malloc_r+0x90>
 80045d0:	4629      	mov	r1, r5
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff ffc0 	bl	8004558 <sbrk_aligned>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	4604      	mov	r4, r0
 80045dc:	d155      	bne.n	800468a <_malloc_r+0xf2>
 80045de:	f8d8 4000 	ldr.w	r4, [r8]
 80045e2:	4626      	mov	r6, r4
 80045e4:	2e00      	cmp	r6, #0
 80045e6:	d145      	bne.n	8004674 <_malloc_r+0xdc>
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d048      	beq.n	800467e <_malloc_r+0xe6>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	4631      	mov	r1, r6
 80045f0:	4638      	mov	r0, r7
 80045f2:	eb04 0903 	add.w	r9, r4, r3
 80045f6:	f000 fb5d 	bl	8004cb4 <_sbrk_r>
 80045fa:	4581      	cmp	r9, r0
 80045fc:	d13f      	bne.n	800467e <_malloc_r+0xe6>
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	1a6d      	subs	r5, r5, r1
 8004602:	4629      	mov	r1, r5
 8004604:	4638      	mov	r0, r7
 8004606:	f7ff ffa7 	bl	8004558 <sbrk_aligned>
 800460a:	3001      	adds	r0, #1
 800460c:	d037      	beq.n	800467e <_malloc_r+0xe6>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	442b      	add	r3, r5
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	f8d8 3000 	ldr.w	r3, [r8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d038      	beq.n	800468e <_malloc_r+0xf6>
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	42a2      	cmp	r2, r4
 8004620:	d12b      	bne.n	800467a <_malloc_r+0xe2>
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	e00f      	b.n	8004648 <_malloc_r+0xb0>
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	1b52      	subs	r2, r2, r5
 800462c:	d41f      	bmi.n	800466e <_malloc_r+0xd6>
 800462e:	2a0b      	cmp	r2, #11
 8004630:	d917      	bls.n	8004662 <_malloc_r+0xca>
 8004632:	1961      	adds	r1, r4, r5
 8004634:	42a3      	cmp	r3, r4
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	bf18      	it	ne
 800463a:	6059      	strne	r1, [r3, #4]
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	bf08      	it	eq
 8004640:	f8c8 1000 	streq.w	r1, [r8]
 8004644:	5162      	str	r2, [r4, r5]
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	4638      	mov	r0, r7
 800464a:	f104 060b 	add.w	r6, r4, #11
 800464e:	f000 f829 	bl	80046a4 <__malloc_unlock>
 8004652:	f026 0607 	bic.w	r6, r6, #7
 8004656:	1d23      	adds	r3, r4, #4
 8004658:	1af2      	subs	r2, r6, r3
 800465a:	d0ae      	beq.n	80045ba <_malloc_r+0x22>
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	50a3      	str	r3, [r4, r2]
 8004660:	e7ab      	b.n	80045ba <_malloc_r+0x22>
 8004662:	42a3      	cmp	r3, r4
 8004664:	6862      	ldr	r2, [r4, #4]
 8004666:	d1dd      	bne.n	8004624 <_malloc_r+0x8c>
 8004668:	f8c8 2000 	str.w	r2, [r8]
 800466c:	e7ec      	b.n	8004648 <_malloc_r+0xb0>
 800466e:	4623      	mov	r3, r4
 8004670:	6864      	ldr	r4, [r4, #4]
 8004672:	e7ac      	b.n	80045ce <_malloc_r+0x36>
 8004674:	4634      	mov	r4, r6
 8004676:	6876      	ldr	r6, [r6, #4]
 8004678:	e7b4      	b.n	80045e4 <_malloc_r+0x4c>
 800467a:	4613      	mov	r3, r2
 800467c:	e7cc      	b.n	8004618 <_malloc_r+0x80>
 800467e:	230c      	movs	r3, #12
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4638      	mov	r0, r7
 8004684:	f000 f80e 	bl	80046a4 <__malloc_unlock>
 8004688:	e797      	b.n	80045ba <_malloc_r+0x22>
 800468a:	6025      	str	r5, [r4, #0]
 800468c:	e7dc      	b.n	8004648 <_malloc_r+0xb0>
 800468e:	605b      	str	r3, [r3, #4]
 8004690:	deff      	udf	#255	; 0xff
 8004692:	bf00      	nop
 8004694:	20000360 	.word	0x20000360

08004698 <__malloc_lock>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__malloc_lock+0x8>)
 800469a:	f7ff bf0f 	b.w	80044bc <__retarget_lock_acquire_recursive>
 800469e:	bf00      	nop
 80046a0:	2000035c 	.word	0x2000035c

080046a4 <__malloc_unlock>:
 80046a4:	4801      	ldr	r0, [pc, #4]	; (80046ac <__malloc_unlock+0x8>)
 80046a6:	f7ff bf0a 	b.w	80044be <__retarget_lock_release_recursive>
 80046aa:	bf00      	nop
 80046ac:	2000035c 	.word	0x2000035c

080046b0 <__ssputs_r>:
 80046b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b4:	688e      	ldr	r6, [r1, #8]
 80046b6:	461f      	mov	r7, r3
 80046b8:	42be      	cmp	r6, r7
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	4682      	mov	sl, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4690      	mov	r8, r2
 80046c2:	d82c      	bhi.n	800471e <__ssputs_r+0x6e>
 80046c4:	898a      	ldrh	r2, [r1, #12]
 80046c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ca:	d026      	beq.n	800471a <__ssputs_r+0x6a>
 80046cc:	6965      	ldr	r5, [r4, #20]
 80046ce:	6909      	ldr	r1, [r1, #16]
 80046d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046d4:	eba3 0901 	sub.w	r9, r3, r1
 80046d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046dc:	1c7b      	adds	r3, r7, #1
 80046de:	444b      	add	r3, r9
 80046e0:	106d      	asrs	r5, r5, #1
 80046e2:	429d      	cmp	r5, r3
 80046e4:	bf38      	it	cc
 80046e6:	461d      	movcc	r5, r3
 80046e8:	0553      	lsls	r3, r2, #21
 80046ea:	d527      	bpl.n	800473c <__ssputs_r+0x8c>
 80046ec:	4629      	mov	r1, r5
 80046ee:	f7ff ff53 	bl	8004598 <_malloc_r>
 80046f2:	4606      	mov	r6, r0
 80046f4:	b360      	cbz	r0, 8004750 <__ssputs_r+0xa0>
 80046f6:	6921      	ldr	r1, [r4, #16]
 80046f8:	464a      	mov	r2, r9
 80046fa:	f000 faeb 	bl	8004cd4 <memcpy>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	6126      	str	r6, [r4, #16]
 800470c:	6165      	str	r5, [r4, #20]
 800470e:	444e      	add	r6, r9
 8004710:	eba5 0509 	sub.w	r5, r5, r9
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	60a5      	str	r5, [r4, #8]
 8004718:	463e      	mov	r6, r7
 800471a:	42be      	cmp	r6, r7
 800471c:	d900      	bls.n	8004720 <__ssputs_r+0x70>
 800471e:	463e      	mov	r6, r7
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	4632      	mov	r2, r6
 8004724:	4641      	mov	r1, r8
 8004726:	f000 faab 	bl	8004c80 <memmove>
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	1b9b      	subs	r3, r3, r6
 800472e:	60a3      	str	r3, [r4, #8]
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	4433      	add	r3, r6
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	2000      	movs	r0, #0
 8004738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473c:	462a      	mov	r2, r5
 800473e:	f000 fad7 	bl	8004cf0 <_realloc_r>
 8004742:	4606      	mov	r6, r0
 8004744:	2800      	cmp	r0, #0
 8004746:	d1e0      	bne.n	800470a <__ssputs_r+0x5a>
 8004748:	6921      	ldr	r1, [r4, #16]
 800474a:	4650      	mov	r0, sl
 800474c:	f7ff feb8 	bl	80044c0 <_free_r>
 8004750:	230c      	movs	r3, #12
 8004752:	f8ca 3000 	str.w	r3, [sl]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	e7e9      	b.n	8004738 <__ssputs_r+0x88>

08004764 <_svfiprintf_r>:
 8004764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004768:	4698      	mov	r8, r3
 800476a:	898b      	ldrh	r3, [r1, #12]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	b09d      	sub	sp, #116	; 0x74
 8004770:	4607      	mov	r7, r0
 8004772:	460d      	mov	r5, r1
 8004774:	4614      	mov	r4, r2
 8004776:	d50e      	bpl.n	8004796 <_svfiprintf_r+0x32>
 8004778:	690b      	ldr	r3, [r1, #16]
 800477a:	b963      	cbnz	r3, 8004796 <_svfiprintf_r+0x32>
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	f7ff ff0b 	bl	8004598 <_malloc_r>
 8004782:	6028      	str	r0, [r5, #0]
 8004784:	6128      	str	r0, [r5, #16]
 8004786:	b920      	cbnz	r0, 8004792 <_svfiprintf_r+0x2e>
 8004788:	230c      	movs	r3, #12
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	e0d0      	b.n	8004934 <_svfiprintf_r+0x1d0>
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	616b      	str	r3, [r5, #20]
 8004796:	2300      	movs	r3, #0
 8004798:	9309      	str	r3, [sp, #36]	; 0x24
 800479a:	2320      	movs	r3, #32
 800479c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a4:	2330      	movs	r3, #48	; 0x30
 80047a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800494c <_svfiprintf_r+0x1e8>
 80047aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047ae:	f04f 0901 	mov.w	r9, #1
 80047b2:	4623      	mov	r3, r4
 80047b4:	469a      	mov	sl, r3
 80047b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ba:	b10a      	cbz	r2, 80047c0 <_svfiprintf_r+0x5c>
 80047bc:	2a25      	cmp	r2, #37	; 0x25
 80047be:	d1f9      	bne.n	80047b4 <_svfiprintf_r+0x50>
 80047c0:	ebba 0b04 	subs.w	fp, sl, r4
 80047c4:	d00b      	beq.n	80047de <_svfiprintf_r+0x7a>
 80047c6:	465b      	mov	r3, fp
 80047c8:	4622      	mov	r2, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	4638      	mov	r0, r7
 80047ce:	f7ff ff6f 	bl	80046b0 <__ssputs_r>
 80047d2:	3001      	adds	r0, #1
 80047d4:	f000 80a9 	beq.w	800492a <_svfiprintf_r+0x1c6>
 80047d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047da:	445a      	add	r2, fp
 80047dc:	9209      	str	r2, [sp, #36]	; 0x24
 80047de:	f89a 3000 	ldrb.w	r3, [sl]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80a1 	beq.w	800492a <_svfiprintf_r+0x1c6>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
 80047ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f2:	f10a 0a01 	add.w	sl, sl, #1
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	9307      	str	r3, [sp, #28]
 80047fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004800:	4654      	mov	r4, sl
 8004802:	2205      	movs	r2, #5
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	4850      	ldr	r0, [pc, #320]	; (800494c <_svfiprintf_r+0x1e8>)
 800480a:	f7fb fd09 	bl	8000220 <memchr>
 800480e:	9a04      	ldr	r2, [sp, #16]
 8004810:	b9d8      	cbnz	r0, 800484a <_svfiprintf_r+0xe6>
 8004812:	06d0      	lsls	r0, r2, #27
 8004814:	bf44      	itt	mi
 8004816:	2320      	movmi	r3, #32
 8004818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481c:	0711      	lsls	r1, r2, #28
 800481e:	bf44      	itt	mi
 8004820:	232b      	movmi	r3, #43	; 0x2b
 8004822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004826:	f89a 3000 	ldrb.w	r3, [sl]
 800482a:	2b2a      	cmp	r3, #42	; 0x2a
 800482c:	d015      	beq.n	800485a <_svfiprintf_r+0xf6>
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	4654      	mov	r4, sl
 8004832:	2000      	movs	r0, #0
 8004834:	f04f 0c0a 	mov.w	ip, #10
 8004838:	4621      	mov	r1, r4
 800483a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800483e:	3b30      	subs	r3, #48	; 0x30
 8004840:	2b09      	cmp	r3, #9
 8004842:	d94d      	bls.n	80048e0 <_svfiprintf_r+0x17c>
 8004844:	b1b0      	cbz	r0, 8004874 <_svfiprintf_r+0x110>
 8004846:	9207      	str	r2, [sp, #28]
 8004848:	e014      	b.n	8004874 <_svfiprintf_r+0x110>
 800484a:	eba0 0308 	sub.w	r3, r0, r8
 800484e:	fa09 f303 	lsl.w	r3, r9, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	9304      	str	r3, [sp, #16]
 8004856:	46a2      	mov	sl, r4
 8004858:	e7d2      	b.n	8004800 <_svfiprintf_r+0x9c>
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	1d19      	adds	r1, r3, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9103      	str	r1, [sp, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfbb      	ittet	lt
 8004866:	425b      	neglt	r3, r3
 8004868:	f042 0202 	orrlt.w	r2, r2, #2
 800486c:	9307      	strge	r3, [sp, #28]
 800486e:	9307      	strlt	r3, [sp, #28]
 8004870:	bfb8      	it	lt
 8004872:	9204      	strlt	r2, [sp, #16]
 8004874:	7823      	ldrb	r3, [r4, #0]
 8004876:	2b2e      	cmp	r3, #46	; 0x2e
 8004878:	d10c      	bne.n	8004894 <_svfiprintf_r+0x130>
 800487a:	7863      	ldrb	r3, [r4, #1]
 800487c:	2b2a      	cmp	r3, #42	; 0x2a
 800487e:	d134      	bne.n	80048ea <_svfiprintf_r+0x186>
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9203      	str	r2, [sp, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfb8      	it	lt
 800488c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004890:	3402      	adds	r4, #2
 8004892:	9305      	str	r3, [sp, #20]
 8004894:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800495c <_svfiprintf_r+0x1f8>
 8004898:	7821      	ldrb	r1, [r4, #0]
 800489a:	2203      	movs	r2, #3
 800489c:	4650      	mov	r0, sl
 800489e:	f7fb fcbf 	bl	8000220 <memchr>
 80048a2:	b138      	cbz	r0, 80048b4 <_svfiprintf_r+0x150>
 80048a4:	9b04      	ldr	r3, [sp, #16]
 80048a6:	eba0 000a 	sub.w	r0, r0, sl
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	4082      	lsls	r2, r0
 80048ae:	4313      	orrs	r3, r2
 80048b0:	3401      	adds	r4, #1
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b8:	4825      	ldr	r0, [pc, #148]	; (8004950 <_svfiprintf_r+0x1ec>)
 80048ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048be:	2206      	movs	r2, #6
 80048c0:	f7fb fcae 	bl	8000220 <memchr>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d038      	beq.n	800493a <_svfiprintf_r+0x1d6>
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <_svfiprintf_r+0x1f0>)
 80048ca:	bb1b      	cbnz	r3, 8004914 <_svfiprintf_r+0x1b0>
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	3307      	adds	r3, #7
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	3308      	adds	r3, #8
 80048d6:	9303      	str	r3, [sp, #12]
 80048d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048da:	4433      	add	r3, r6
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	e768      	b.n	80047b2 <_svfiprintf_r+0x4e>
 80048e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048e4:	460c      	mov	r4, r1
 80048e6:	2001      	movs	r0, #1
 80048e8:	e7a6      	b.n	8004838 <_svfiprintf_r+0xd4>
 80048ea:	2300      	movs	r3, #0
 80048ec:	3401      	adds	r4, #1
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	4619      	mov	r1, r3
 80048f2:	f04f 0c0a 	mov.w	ip, #10
 80048f6:	4620      	mov	r0, r4
 80048f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048fc:	3a30      	subs	r2, #48	; 0x30
 80048fe:	2a09      	cmp	r2, #9
 8004900:	d903      	bls.n	800490a <_svfiprintf_r+0x1a6>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0c6      	beq.n	8004894 <_svfiprintf_r+0x130>
 8004906:	9105      	str	r1, [sp, #20]
 8004908:	e7c4      	b.n	8004894 <_svfiprintf_r+0x130>
 800490a:	fb0c 2101 	mla	r1, ip, r1, r2
 800490e:	4604      	mov	r4, r0
 8004910:	2301      	movs	r3, #1
 8004912:	e7f0      	b.n	80048f6 <_svfiprintf_r+0x192>
 8004914:	ab03      	add	r3, sp, #12
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	462a      	mov	r2, r5
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <_svfiprintf_r+0x1f4>)
 800491c:	a904      	add	r1, sp, #16
 800491e:	4638      	mov	r0, r7
 8004920:	f3af 8000 	nop.w
 8004924:	1c42      	adds	r2, r0, #1
 8004926:	4606      	mov	r6, r0
 8004928:	d1d6      	bne.n	80048d8 <_svfiprintf_r+0x174>
 800492a:	89ab      	ldrh	r3, [r5, #12]
 800492c:	065b      	lsls	r3, r3, #25
 800492e:	f53f af2d 	bmi.w	800478c <_svfiprintf_r+0x28>
 8004932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004934:	b01d      	add	sp, #116	; 0x74
 8004936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493a:	ab03      	add	r3, sp, #12
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	462a      	mov	r2, r5
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <_svfiprintf_r+0x1f4>)
 8004942:	a904      	add	r1, sp, #16
 8004944:	4638      	mov	r0, r7
 8004946:	f000 f879 	bl	8004a3c <_printf_i>
 800494a:	e7eb      	b.n	8004924 <_svfiprintf_r+0x1c0>
 800494c:	08004da4 	.word	0x08004da4
 8004950:	08004dae 	.word	0x08004dae
 8004954:	00000000 	.word	0x00000000
 8004958:	080046b1 	.word	0x080046b1
 800495c:	08004daa 	.word	0x08004daa

08004960 <_printf_common>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	4616      	mov	r6, r2
 8004966:	4699      	mov	r9, r3
 8004968:	688a      	ldr	r2, [r1, #8]
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004970:	4293      	cmp	r3, r2
 8004972:	bfb8      	it	lt
 8004974:	4613      	movlt	r3, r2
 8004976:	6033      	str	r3, [r6, #0]
 8004978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800497c:	4607      	mov	r7, r0
 800497e:	460c      	mov	r4, r1
 8004980:	b10a      	cbz	r2, 8004986 <_printf_common+0x26>
 8004982:	3301      	adds	r3, #1
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	0699      	lsls	r1, r3, #26
 800498a:	bf42      	ittt	mi
 800498c:	6833      	ldrmi	r3, [r6, #0]
 800498e:	3302      	addmi	r3, #2
 8004990:	6033      	strmi	r3, [r6, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	f015 0506 	ands.w	r5, r5, #6
 8004998:	d106      	bne.n	80049a8 <_printf_common+0x48>
 800499a:	f104 0a19 	add.w	sl, r4, #25
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	6832      	ldr	r2, [r6, #0]
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dc26      	bgt.n	80049f6 <_printf_common+0x96>
 80049a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ac:	1e13      	subs	r3, r2, #0
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	bf18      	it	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	0692      	lsls	r2, r2, #26
 80049b6:	d42b      	bmi.n	8004a10 <_printf_common+0xb0>
 80049b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049bc:	4649      	mov	r1, r9
 80049be:	4638      	mov	r0, r7
 80049c0:	47c0      	blx	r8
 80049c2:	3001      	adds	r0, #1
 80049c4:	d01e      	beq.n	8004a04 <_printf_common+0xa4>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf02      	ittt	eq
 80049d2:	68e5      	ldreq	r5, [r4, #12]
 80049d4:	6833      	ldreq	r3, [r6, #0]
 80049d6:	1aed      	subeq	r5, r5, r3
 80049d8:	68a3      	ldr	r3, [r4, #8]
 80049da:	bf0c      	ite	eq
 80049dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e0:	2500      	movne	r5, #0
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bfc4      	itt	gt
 80049e6:	1a9b      	subgt	r3, r3, r2
 80049e8:	18ed      	addgt	r5, r5, r3
 80049ea:	2600      	movs	r6, #0
 80049ec:	341a      	adds	r4, #26
 80049ee:	42b5      	cmp	r5, r6
 80049f0:	d11a      	bne.n	8004a28 <_printf_common+0xc8>
 80049f2:	2000      	movs	r0, #0
 80049f4:	e008      	b.n	8004a08 <_printf_common+0xa8>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4652      	mov	r2, sl
 80049fa:	4649      	mov	r1, r9
 80049fc:	4638      	mov	r0, r7
 80049fe:	47c0      	blx	r8
 8004a00:	3001      	adds	r0, #1
 8004a02:	d103      	bne.n	8004a0c <_printf_common+0xac>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7c6      	b.n	800499e <_printf_common+0x3e>
 8004a10:	18e1      	adds	r1, r4, r3
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	2030      	movs	r0, #48	; 0x30
 8004a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a1a:	4422      	add	r2, r4
 8004a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a24:	3302      	adds	r3, #2
 8004a26:	e7c7      	b.n	80049b8 <_printf_common+0x58>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	3001      	adds	r0, #1
 8004a34:	d0e6      	beq.n	8004a04 <_printf_common+0xa4>
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7d9      	b.n	80049ee <_printf_common+0x8e>
	...

08004a3c <_printf_i>:
 8004a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	7e0f      	ldrb	r7, [r1, #24]
 8004a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a44:	2f78      	cmp	r7, #120	; 0x78
 8004a46:	4691      	mov	r9, r2
 8004a48:	4680      	mov	r8, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	469a      	mov	sl, r3
 8004a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a52:	d807      	bhi.n	8004a64 <_printf_i+0x28>
 8004a54:	2f62      	cmp	r7, #98	; 0x62
 8004a56:	d80a      	bhi.n	8004a6e <_printf_i+0x32>
 8004a58:	2f00      	cmp	r7, #0
 8004a5a:	f000 80d4 	beq.w	8004c06 <_printf_i+0x1ca>
 8004a5e:	2f58      	cmp	r7, #88	; 0x58
 8004a60:	f000 80c0 	beq.w	8004be4 <_printf_i+0x1a8>
 8004a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a6c:	e03a      	b.n	8004ae4 <_printf_i+0xa8>
 8004a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a72:	2b15      	cmp	r3, #21
 8004a74:	d8f6      	bhi.n	8004a64 <_printf_i+0x28>
 8004a76:	a101      	add	r1, pc, #4	; (adr r1, 8004a7c <_printf_i+0x40>)
 8004a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	08004ae9 	.word	0x08004ae9
 8004a84:	08004a65 	.word	0x08004a65
 8004a88:	08004a65 	.word	0x08004a65
 8004a8c:	08004a65 	.word	0x08004a65
 8004a90:	08004a65 	.word	0x08004a65
 8004a94:	08004ae9 	.word	0x08004ae9
 8004a98:	08004a65 	.word	0x08004a65
 8004a9c:	08004a65 	.word	0x08004a65
 8004aa0:	08004a65 	.word	0x08004a65
 8004aa4:	08004a65 	.word	0x08004a65
 8004aa8:	08004bed 	.word	0x08004bed
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004ba7 	.word	0x08004ba7
 8004ab4:	08004a65 	.word	0x08004a65
 8004ab8:	08004a65 	.word	0x08004a65
 8004abc:	08004c0f 	.word	0x08004c0f
 8004ac0:	08004a65 	.word	0x08004a65
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	08004a65 	.word	0x08004a65
 8004acc:	08004a65 	.word	0x08004a65
 8004ad0:	08004baf 	.word	0x08004baf
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	602a      	str	r2, [r5, #0]
 8004adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e09f      	b.n	8004c28 <_printf_i+0x1ec>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	0607      	lsls	r7, r0, #24
 8004aee:	f103 0104 	add.w	r1, r3, #4
 8004af2:	6029      	str	r1, [r5, #0]
 8004af4:	d501      	bpl.n	8004afa <_printf_i+0xbe>
 8004af6:	681e      	ldr	r6, [r3, #0]
 8004af8:	e003      	b.n	8004b02 <_printf_i+0xc6>
 8004afa:	0646      	lsls	r6, r0, #25
 8004afc:	d5fb      	bpl.n	8004af6 <_printf_i+0xba>
 8004afe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	da03      	bge.n	8004b0e <_printf_i+0xd2>
 8004b06:	232d      	movs	r3, #45	; 0x2d
 8004b08:	4276      	negs	r6, r6
 8004b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0e:	485a      	ldr	r0, [pc, #360]	; (8004c78 <_printf_i+0x23c>)
 8004b10:	230a      	movs	r3, #10
 8004b12:	e012      	b.n	8004b3a <_printf_i+0xfe>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	6029      	str	r1, [r5, #0]
 8004b1c:	0605      	lsls	r5, r0, #24
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0xe8>
 8004b20:	681e      	ldr	r6, [r3, #0]
 8004b22:	e002      	b.n	8004b2a <_printf_i+0xee>
 8004b24:	0641      	lsls	r1, r0, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0xe4>
 8004b28:	881e      	ldrh	r6, [r3, #0]
 8004b2a:	4853      	ldr	r0, [pc, #332]	; (8004c78 <_printf_i+0x23c>)
 8004b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b2e:	bf0c      	ite	eq
 8004b30:	2308      	moveq	r3, #8
 8004b32:	230a      	movne	r3, #10
 8004b34:	2100      	movs	r1, #0
 8004b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3a:	6865      	ldr	r5, [r4, #4]
 8004b3c:	60a5      	str	r5, [r4, #8]
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	bfa2      	ittt	ge
 8004b42:	6821      	ldrge	r1, [r4, #0]
 8004b44:	f021 0104 	bicge.w	r1, r1, #4
 8004b48:	6021      	strge	r1, [r4, #0]
 8004b4a:	b90e      	cbnz	r6, 8004b50 <_printf_i+0x114>
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	d04b      	beq.n	8004be8 <_printf_i+0x1ac>
 8004b50:	4615      	mov	r5, r2
 8004b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b56:	fb03 6711 	mls	r7, r3, r1, r6
 8004b5a:	5dc7      	ldrb	r7, [r0, r7]
 8004b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b60:	4637      	mov	r7, r6
 8004b62:	42bb      	cmp	r3, r7
 8004b64:	460e      	mov	r6, r1
 8004b66:	d9f4      	bls.n	8004b52 <_printf_i+0x116>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d10b      	bne.n	8004b84 <_printf_i+0x148>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	07de      	lsls	r6, r3, #31
 8004b70:	d508      	bpl.n	8004b84 <_printf_i+0x148>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	4299      	cmp	r1, r3
 8004b78:	bfde      	ittt	le
 8004b7a:	2330      	movle	r3, #48	; 0x30
 8004b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b84:	1b52      	subs	r2, r2, r5
 8004b86:	6122      	str	r2, [r4, #16]
 8004b88:	f8cd a000 	str.w	sl, [sp]
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	aa03      	add	r2, sp, #12
 8004b90:	4621      	mov	r1, r4
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fee4 	bl	8004960 <_printf_common>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d14a      	bne.n	8004c32 <_printf_i+0x1f6>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b004      	add	sp, #16
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f043 0320 	orr.w	r3, r3, #32
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	4833      	ldr	r0, [pc, #204]	; (8004c7c <_printf_i+0x240>)
 8004bb0:	2778      	movs	r7, #120	; 0x78
 8004bb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	6829      	ldr	r1, [r5, #0]
 8004bba:	061f      	lsls	r7, r3, #24
 8004bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0x18c>
 8004bc2:	065f      	lsls	r7, r3, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2b6      	uxthmi	r6, r6
 8004bc8:	07df      	lsls	r7, r3, #31
 8004bca:	bf48      	it	mi
 8004bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd0:	6029      	str	r1, [r5, #0]
 8004bd2:	bf48      	it	mi
 8004bd4:	6023      	strmi	r3, [r4, #0]
 8004bd6:	b91e      	cbnz	r6, 8004be0 <_printf_i+0x1a4>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	f023 0320 	bic.w	r3, r3, #32
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	2310      	movs	r3, #16
 8004be2:	e7a7      	b.n	8004b34 <_printf_i+0xf8>
 8004be4:	4824      	ldr	r0, [pc, #144]	; (8004c78 <_printf_i+0x23c>)
 8004be6:	e7e4      	b.n	8004bb2 <_printf_i+0x176>
 8004be8:	4615      	mov	r5, r2
 8004bea:	e7bd      	b.n	8004b68 <_printf_i+0x12c>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	6826      	ldr	r6, [r4, #0]
 8004bf0:	6961      	ldr	r1, [r4, #20]
 8004bf2:	1d18      	adds	r0, r3, #4
 8004bf4:	6028      	str	r0, [r5, #0]
 8004bf6:	0635      	lsls	r5, r6, #24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0x1c4>
 8004bfc:	6019      	str	r1, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0x1ca>
 8004c00:	0670      	lsls	r0, r6, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0x1c0>
 8004c04:	8019      	strh	r1, [r3, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	4615      	mov	r5, r2
 8004c0c:	e7bc      	b.n	8004b88 <_printf_i+0x14c>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7fb fb00 	bl	8000220 <memchr>
 8004c20:	b108      	cbz	r0, 8004c26 <_printf_i+0x1ea>
 8004c22:	1b40      	subs	r0, r0, r5
 8004c24:	6060      	str	r0, [r4, #4]
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c30:	e7aa      	b.n	8004b88 <_printf_i+0x14c>
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	462a      	mov	r2, r5
 8004c36:	4649      	mov	r1, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	47d0      	blx	sl
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d0ad      	beq.n	8004b9c <_printf_i+0x160>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	079b      	lsls	r3, r3, #30
 8004c44:	d413      	bmi.n	8004c6e <_printf_i+0x232>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e7a6      	b.n	8004ba0 <_printf_i+0x164>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4632      	mov	r2, r6
 8004c56:	4649      	mov	r1, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	47d0      	blx	sl
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d09d      	beq.n	8004b9c <_printf_i+0x160>
 8004c60:	3501      	adds	r5, #1
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	9903      	ldr	r1, [sp, #12]
 8004c66:	1a5b      	subs	r3, r3, r1
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	dcf2      	bgt.n	8004c52 <_printf_i+0x216>
 8004c6c:	e7eb      	b.n	8004c46 <_printf_i+0x20a>
 8004c6e:	2500      	movs	r5, #0
 8004c70:	f104 0619 	add.w	r6, r4, #25
 8004c74:	e7f5      	b.n	8004c62 <_printf_i+0x226>
 8004c76:	bf00      	nop
 8004c78:	08004db5 	.word	0x08004db5
 8004c7c:	08004dc6 	.word	0x08004dc6

08004c80 <memmove>:
 8004c80:	4288      	cmp	r0, r1
 8004c82:	b510      	push	{r4, lr}
 8004c84:	eb01 0402 	add.w	r4, r1, r2
 8004c88:	d902      	bls.n	8004c90 <memmove+0x10>
 8004c8a:	4284      	cmp	r4, r0
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	d807      	bhi.n	8004ca0 <memmove+0x20>
 8004c90:	1e43      	subs	r3, r0, #1
 8004c92:	42a1      	cmp	r1, r4
 8004c94:	d008      	beq.n	8004ca8 <memmove+0x28>
 8004c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c9e:	e7f8      	b.n	8004c92 <memmove+0x12>
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	d100      	bne.n	8004caa <memmove+0x2a>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb2:	e7f7      	b.n	8004ca4 <memmove+0x24>

08004cb4 <_sbrk_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	; (8004cd0 <_sbrk_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f7fc f844 	bl	8000d4c <_sbrk>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_sbrk_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_sbrk_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	20000358 	.word	0x20000358

08004cd4 <memcpy>:
 8004cd4:	440a      	add	r2, r1
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cdc:	d100      	bne.n	8004ce0 <memcpy+0xc>
 8004cde:	4770      	bx	lr
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cea:	4291      	cmp	r1, r2
 8004cec:	d1f9      	bne.n	8004ce2 <memcpy+0xe>
 8004cee:	bd10      	pop	{r4, pc}

08004cf0 <_realloc_r>:
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	460e      	mov	r6, r1
 8004cfa:	b921      	cbnz	r1, 8004d06 <_realloc_r+0x16>
 8004cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d00:	4611      	mov	r1, r2
 8004d02:	f7ff bc49 	b.w	8004598 <_malloc_r>
 8004d06:	b92a      	cbnz	r2, 8004d14 <_realloc_r+0x24>
 8004d08:	f7ff fbda 	bl	80044c0 <_free_r>
 8004d0c:	4625      	mov	r5, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	f000 f81b 	bl	8004d4e <_malloc_usable_size_r>
 8004d18:	4284      	cmp	r4, r0
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	d802      	bhi.n	8004d24 <_realloc_r+0x34>
 8004d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d22:	d812      	bhi.n	8004d4a <_realloc_r+0x5a>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fc36 	bl	8004598 <_malloc_r>
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d0ed      	beq.n	8004d0e <_realloc_r+0x1e>
 8004d32:	42bc      	cmp	r4, r7
 8004d34:	4622      	mov	r2, r4
 8004d36:	4631      	mov	r1, r6
 8004d38:	bf28      	it	cs
 8004d3a:	463a      	movcs	r2, r7
 8004d3c:	f7ff ffca 	bl	8004cd4 <memcpy>
 8004d40:	4631      	mov	r1, r6
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fbbc 	bl	80044c0 <_free_r>
 8004d48:	e7e1      	b.n	8004d0e <_realloc_r+0x1e>
 8004d4a:	4635      	mov	r5, r6
 8004d4c:	e7df      	b.n	8004d0e <_realloc_r+0x1e>

08004d4e <_malloc_usable_size_r>:
 8004d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d52:	1f18      	subs	r0, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bfbc      	itt	lt
 8004d58:	580b      	ldrlt	r3, [r1, r0]
 8004d5a:	18c0      	addlt	r0, r0, r3
 8004d5c:	4770      	bx	lr
	...

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
